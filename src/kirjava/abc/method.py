#!/usr/bin/env python3

__all__ = (
    "Method",
)

"""
Java method abstraction.
"""

import typing
from typing import Iterable, Tuple

from ..types import BaseType

if typing.TYPE_CHECKING:
    from .class_ import Class


class Method:
    """
    An abstract representation of a Java method.
    """

    # ------------------------------ Access flags ------------------------------ #

    @property
    def is_public(self) -> bool:
        """
        Is this method public?
        """

        ...

    @is_public.setter
    def is_public(self, value: bool) -> None:
        ...

    @property
    def is_private(self) -> bool:
        """
        Is this method private?
        """

        ...

    @is_private.setter
    def is_private(self, value: bool) -> None:
        ...

    @property
    def is_protected(self) -> bool:
        """
        Is this method protected?
        """

        ...

    @is_protected.setter
    def is_protected(self, value: bool) -> None:
        ...

    @property
    def is_static(self) -> bool:
        """
        Is this method static?
        """

        ...

    @is_static.setter
    def is_static(self, value: bool) -> None:
        ...

    @property
    def is_final(self) -> bool:
        """
        Is this method final (cannot be overriden)?
        """

        ...

    @is_final.setter
    def is_final(self, value: bool) -> None:
        ...

    @property
    def is_synchronized(self) -> bool:
        """
        Is access to this method synchronized?
        """

        ...

    @is_synchronized.setter
    def is_synchronized(self, value: bool) -> None:
        ...

    @property
    def is_bridge(self) -> bool:
        """
        Is this method generated by the compiler?
        """

        ...

    @is_bridge.setter
    def is_bridge(self, value: bool) -> None:
        ...

    @property
    def is_varargs(self) -> bool:
        """
        Does this method have a variable number of arguments?
        """

        ...

    @is_varargs.setter
    def is_varargs(self, value: bool) -> None:
        ...

    @property
    def is_native(self) -> bool:
        """
        Does this method reference a function defined in a native binary?
        """

        ...

    @is_native.setter
    def is_native(self, value: bool) -> None:
        ...

    @property
    def is_abstract(self) -> bool:
        """
        Does this method have a provided implementation?
        """

        ...

    @is_abstract.setter
    def is_abstract(self, value: bool) -> None:
        ...

    @property
    def is_strict(self) -> bool:
        """
        Does this method use FP-strict floating point mode?
        """

        ...

    @is_strict.setter
    def is_strict(self, value: bool) -> None:
        ...

    @property
    def is_synthetic(self) -> bool:
        """
        Is this method synthetic (generated by the compiler)?
        """

        ...

    @is_synthetic.setter
    def is_synthetic(self, value: bool) -> None:
        ...

    # ------------------------------ Other properties ------------------------------ #

    @property
    def name(self) -> str:
        """
        The name of this method.
        """

        ...

    @name.setter
    def name(self, value: str) -> None:
        ...

    @property
    def argument_types(self) -> Tuple[BaseType, ...]:
        """
        The argument types of this method.
        """

        ...

    @argument_types.setter
    def argument_types(self, value: Iterable[BaseType]) -> None:
        ...

    @property
    def return_type(self) -> BaseType:
        """
        The return type of this method.
        """

        ...

    @return_type.setter
    def return_type(self, value: BaseType) -> None:
        ...

    # ------------------------------ Methods ------------------------------ #

    def __init__(self, class_: "Class") -> None:
        """
        :param class_: The class that this method belongs to.
        """

        self.class_ = class_

    def get_reference(self) -> Tuple["Class", str, Tuple[BaseType, ...], BaseType]:
        """
        :return: A reference to this method that can be used in instructions.
        """

        return self.class_, self.name, self.argument_types, self.return_type

    def get_ref(self) -> Tuple["Class", str, Tuple[BaseType, ...], BaseType]:
        """
        :return: A reference to this method that can be used in instructions.
        """

        return self.class_, self.name, self.argument_types, self.return_type
