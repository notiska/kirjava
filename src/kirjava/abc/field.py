#!/usr/bin/env python3

__all__ = (
    "Field",
)

"""
Java field abstraction.
"""

import typing
from typing import Tuple

from ..types import BaseType

if typing.TYPE_CHECKING:
    from .class_ import Class


class Field:
    """
    An abstract representation of a Java field.
    """

    # ------------------------------ Access flags ------------------------------ #

    @property
    def is_public(self) -> bool:
        """
        Is this field public?
        """

        ...

    @is_public.setter
    def is_public(self, value: bool) -> None:
        ...

    @property
    def is_private(self) -> bool:
        """
        Is this field private?
        """

        ...

    @is_private.setter
    def is_private(self, value: bool) -> None:
        ...

    @property
    def is_protected(self) -> bool:
        """
        Is this field protected?
        """

        ...

    @is_protected.setter
    def is_protected(self, value: bool) -> None:
        ...

    @property
    def is_static(self) -> bool:
        """
        Is this field static?
        """

        ...

    @is_static.setter
    def is_static(self, value: bool) -> None:
        ...

    @property
    def is_final(self) -> bool:
        """
        Is this field final (cannot be re-assigned)?
        """

        ...

    @is_final.setter
    def is_final(self, value: bool) -> None:
        ...

    @property
    def is_volatile(self) -> bool:
        """
        Is this field volatile (can't be cached)?
        """

        ...

    @is_volatile.setter
    def is_volatile(self, value: bool) -> None:
        ...

    @property
    def is_transient(self) -> bool:
        """
        Is this field transient?
        """

        ...

    @is_transient.setter
    def is_transient(self, value: bool) -> None:
        ...

    @property
    def is_synthetic(self) -> bool:
        """
        Is this field synthetic (generated by the compiler)?
        """

        ...

    @is_synthetic.setter
    def is_synthetic(self, value: bool) -> None:
        ...

    @property
    def is_enum(self) -> bool:
        """
        Is this field an element of an enum class?
        """

        ...

    @is_enum.setter
    def is_enum(self, value: bool) -> None:
        ...

    # ------------------------------ Other properties ------------------------------ #

    @property
    def name(self) -> str:
        """
        The name of this field.
        """

        ...

    @name.setter
    def name(self, value: bool) -> None:
        ...

    @property
    def type(self) -> BaseType:
        """
        The type of this field.
        """

        ...

    @type.setter
    def type(self, value: BaseType) -> None:
        ...

    # ------------------------------ Methods ------------------------------ #

    def __init__(self, class_: "Class") -> None:
        """
        :param class_: The class that this field belongs to.
        """

        self.class_ = class_

    def get_reference(self) -> Tuple["Class", str, BaseType]:
        """
        :return: A reference to this field that can be used in instructions.
        """

        return self.class_, self.name, self.type

    def get_ref(self) -> Tuple["Class", str, BaseType]:
        """
        :return: A reference to this field that can be used in instructions.
        """

        return self.class_, self.name, self.type
