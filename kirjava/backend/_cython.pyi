__all__ = (
    "u8", "u16", "u32", "u64",
    "i8", "i16", "i32", "i64",
    "f32", "f64",
    "isnan",
    "unpack_u8", "pack_u8", "unpack_u16", "pack_u16", "unpack_u32", "pack_u32", "unpack_u64", "pack_u64",
    "unpack_i8", "pack_i8", "unpack_i16", "pack_i16", "unpack_i32", "pack_i32", "unpack_i64", "pack_i64",
    "unpack_f32", "pack_f32", "unpack_f64", "pack_f64",
)

from typing import SupportsInt, SupportsFloat


class u8:

    def __init__(self, value: SupportsInt) -> None:
        ...

    def __int__(self) -> int:
        ...

    def __float__(self) -> float:
        ...

    def __bool__(self) -> bool:
        ...

    def __lt__(self, other: object) -> bool:
        ...

    def __le__(self, other: object) -> bool:
        ...

    def __eq__(self, other: object) -> bool:
        ...

    def __ne__(self, other: object) -> bool:
        ...

    def __gt__(self, other: object) -> bool:
        ...

    def __ge__(self, other: object) -> bool:
        ...

    def __hash__(self) -> int:
        ...

    def __add__(self, other: SupportsInt) -> u8:
        ...

    def __sub__(self, other: SupportsInt) -> u8:
        ...

    def __mul__(self, other: SupportsInt) -> u8:
        ...

    def __mod__(self, other: SupportsInt) -> u8:
        ...

    def __floordiv__(self, other: SupportsInt) -> u8:
        ...

    def __truediv__(self, other: SupportsInt) -> u8:
        ...

    def __neg__(self) -> u8:
        ...

    def __abs__(self) -> u8:
        ...

    def __invert__(self) -> u8:
        ...

    def __lshift__(self, other: SupportsInt) -> u8:
        ...

    def __rshift__(self, other: SupportsInt) -> u8:
        ...

    def __and__(self, other: SupportsInt) -> u8:
        ...

    def __xor__(self, other: SupportsInt) -> u8:
        ...

    def __or__(self, other: SupportsInt) -> u8:
        ...


class u16:

    def __init__(self, value: SupportsInt) -> None:
        ...

    def __int__(self) -> int:
        ...

    def __float__(self) -> float:
        ...

    def __bool__(self) -> bool:
        ...

    def __lt__(self, other: object) -> bool:
        ...

    def __le__(self, other: object) -> bool:
        ...

    def __eq__(self, other: object) -> bool:
        ...

    def __ne__(self, other: object) -> bool:
        ...

    def __gt__(self, other: object) -> bool:
        ...

    def __ge__(self, other: object) -> bool:
        ...

    def __hash__(self) -> int:
        ...

    def __add__(self, other: SupportsInt) -> u16:
        ...

    def __sub__(self, other: SupportsInt) -> u16:
        ...

    def __mul__(self, other: SupportsInt) -> u16:
        ...

    def __mod__(self, other: SupportsInt) -> u16:
        ...

    def __floordiv__(self, other: SupportsInt) -> u16:
        ...

    def __truediv__(self, other: SupportsInt) -> u16:
        ...

    def __neg__(self) -> u16:
        ...

    def __abs__(self) -> u16:
        ...

    def __invert__(self) -> u16:
        ...

    def __lshift__(self, other: SupportsInt) -> u16:
        ...

    def __rshift__(self, other: SupportsInt) -> u16:
        ...

    def __and__(self, other: SupportsInt) -> u16:
        ...

    def __xor__(self, other: SupportsInt) -> u16:
        ...

    def __or__(self, other: SupportsInt) -> u16:
        ...


class u32:

    def __init__(self, value: SupportsInt) -> None:
        ...

    def __int__(self) -> int:
        ...

    def __float__(self) -> float:
        ...

    def __bool__(self) -> bool:
        ...

    def __lt__(self, other: object) -> bool:
        ...

    def __le__(self, other: object) -> bool:
        ...

    def __eq__(self, other: object) -> bool:
        ...

    def __ne__(self, other: object) -> bool:
        ...

    def __gt__(self, other: object) -> bool:
        ...

    def __ge__(self, other: object) -> bool:
        ...

    def __hash__(self) -> int:
        ...

    def __add__(self, other: SupportsInt) -> u32:
        ...

    def __sub__(self, other: SupportsInt) -> u32:
        ...

    def __mul__(self, other: SupportsInt) -> u32:
        ...

    def __mod__(self, other: SupportsInt) -> u32:
        ...

    def __floordiv__(self, other: SupportsInt) -> u32:
        ...

    def __truediv__(self, other: SupportsInt) -> u32:
        ...

    def __neg__(self) -> u32:
        ...

    def __abs__(self) -> u32:
        ...

    def __invert__(self) -> u32:
        ...

    def __lshift__(self, other: SupportsInt) -> u32:
        ...

    def __rshift__(self, other: SupportsInt) -> u32:
        ...

    def __and__(self, other: SupportsInt) -> u32:
        ...

    def __xor__(self, other: SupportsInt) -> u32:
        ...

    def __or__(self, other: SupportsInt) -> u32:
        ...


class u64:

    def __init__(self, value: SupportsInt) -> None:
        ...

    def __int__(self) -> int:
        ...

    def __float__(self) -> float:
        ...

    def __bool__(self) -> bool:
        ...

    def __lt__(self, other: object) -> bool:
        ...

    def __le__(self, other: object) -> bool:
        ...

    def __eq__(self, other: object) -> bool:
        ...

    def __ne__(self, other: object) -> bool:
        ...

    def __gt__(self, other: object) -> bool:
        ...

    def __ge__(self, other: object) -> bool:
        ...

    def __hash__(self) -> int:
        ...

    def __add__(self, other: SupportsInt) -> u64:
        ...

    def __sub__(self, other: SupportsInt) -> u64:
        ...

    def __mul__(self, other: SupportsInt) -> u64:
        ...

    def __mod__(self, other: SupportsInt) -> u64:
        ...

    def __floordiv__(self, other: SupportsInt) -> u64:
        ...

    def __truediv__(self, other: SupportsInt) -> u64:
        ...

    def __neg__(self) -> u64:
        ...

    def __abs__(self) -> u64:
        ...

    def __invert__(self) -> u64:
        ...

    def __lshift__(self, other: SupportsInt) -> u64:
        ...

    def __rshift__(self, other: SupportsInt) -> u64:
        ...

    def __and__(self, other: SupportsInt) -> u64:
        ...

    def __xor__(self, other: SupportsInt) -> u64:
        ...

    def __or__(self, other: SupportsInt) -> u64:
        ...


class i8:

    def __init__(self, value: SupportsInt) -> None:
        ...

    def __int__(self) -> int:
        ...

    def __float__(self) -> float:
        ...

    def __bool__(self) -> bool:
        ...

    def __lt__(self, other: object) -> bool:
        ...

    def __le__(self, other: object) -> bool:
        ...

    def __eq__(self, other: object) -> bool:
        ...

    def __ne__(self, other: object) -> bool:
        ...

    def __gt__(self, other: object) -> bool:
        ...

    def __ge__(self, other: object) -> bool:
        ...

    def __hash__(self) -> int:
        ...

    def __add__(self, other: SupportsInt) -> i8:
        ...

    def __sub__(self, other: SupportsInt) -> i8:
        ...

    def __mul__(self, other: SupportsInt) -> i8:
        ...

    def __mod__(self, other: SupportsInt) -> i8:
        ...

    def __floordiv__(self, other: SupportsInt) -> i8:
        ...

    def __truediv__(self, other: SupportsInt) -> i8:
        ...

    def __neg__(self) -> i8:
        ...

    def __abs__(self) -> i8:
        ...

    def __invert__(self) -> i8:
        ...

    def __lshift__(self, other: SupportsInt) -> i8:
        ...

    def __rshift__(self, other: SupportsInt) -> i8:
        ...

    def __and__(self, other: SupportsInt) -> i8:
        ...

    def __xor__(self, other: SupportsInt) -> i8:
        ...

    def __or__(self, other: SupportsInt) -> i8:
        ...


class i16:

    def __init__(self, value: SupportsInt) -> None:
        ...

    def __int__(self) -> int:
        ...

    def __float__(self) -> float:
        ...

    def __bool__(self) -> bool:
        ...

    def __lt__(self, other: object) -> bool:
        ...

    def __le__(self, other: object) -> bool:
        ...

    def __eq__(self, other: object) -> bool:
        ...

    def __ne__(self, other: object) -> bool:
        ...

    def __gt__(self, other: object) -> bool:
        ...

    def __ge__(self, other: object) -> bool:
        ...

    def __hash__(self) -> int:
        ...

    def __add__(self, other: SupportsInt) -> i16:
        ...

    def __sub__(self, other: SupportsInt) -> i16:
        ...

    def __mul__(self, other: SupportsInt) -> i16:
        ...

    def __mod__(self, other: SupportsInt) -> i16:
        ...

    def __floordiv__(self, other: SupportsInt) -> i16:
        ...

    def __truediv__(self, other: SupportsInt) -> i16:
        ...

    def __neg__(self) -> i16:
        ...

    def __abs__(self) -> i16:
        ...

    def __invert__(self) -> i16:
        ...

    def __lshift__(self, other: SupportsInt) -> i16:
        ...

    def __rshift__(self, other: SupportsInt) -> i16:
        ...

    def __and__(self, other: SupportsInt) -> i16:
        ...

    def __xor__(self, other: SupportsInt) -> i16:
        ...

    def __or__(self, other: SupportsInt) -> i16:
        ...


class i32:

    def __init__(self, value: SupportsInt) -> None:
        ...

    def __int__(self) -> int:
        ...

    def __float__(self) -> float:
        ...

    def __bool__(self) -> bool:
        ...

    def __lt__(self, other: object) -> bool:
        ...

    def __le__(self, other: object) -> bool:
        ...

    def __eq__(self, other: object) -> bool:
        ...

    def __ne__(self, other: object) -> bool:
        ...

    def __gt__(self, other: object) -> bool:
        ...

    def __ge__(self, other: object) -> bool:
        ...

    def __hash__(self) -> int:
        ...

    def __add__(self, other: SupportsInt) -> i32:
        ...

    def __sub__(self, other: SupportsInt) -> i32:
        ...

    def __mul__(self, other: SupportsInt) -> i32:
        ...

    def __mod__(self, other: SupportsInt) -> i32:
        ...

    def __floordiv__(self, other: SupportsInt) -> i32:
        ...

    def __truediv__(self, other: SupportsInt) -> i32:
        ...

    def __neg__(self) -> i32:
        ...

    def __abs__(self) -> i32:
        ...

    def __invert__(self) -> i32:
        ...

    def __lshift__(self, other: SupportsInt) -> i32:
        ...

    def __rshift__(self, other: SupportsInt) -> i32:
        ...

    def __and__(self, other: SupportsInt) -> i32:
        ...

    def __xor__(self, other: SupportsInt) -> i32:
        ...

    def __or__(self, other: SupportsInt) -> i32:
        ...


class i64:

    def __init__(self, value: SupportsInt) -> None:
        ...

    def __int__(self) -> int:
        ...

    def __float__(self) -> float:
        ...

    def __bool__(self) -> bool:
        ...

    def __lt__(self, other: object) -> bool:
        ...

    def __le__(self, other: object) -> bool:
        ...

    def __eq__(self, other: object) -> bool:
        ...

    def __ne__(self, other: object) -> bool:
        ...

    def __gt__(self, other: object) -> bool:
        ...

    def __ge__(self, other: object) -> bool:
        ...

    def __hash__(self) -> int:
        ...

    def __add__(self, other: SupportsInt) -> i64:
        ...

    def __sub__(self, other: SupportsInt) -> i64:
        ...

    def __mul__(self, other: SupportsInt) -> i64:
        ...

    def __mod__(self, other: SupportsInt) -> i64:
        ...

    def __floordiv__(self, other: SupportsInt) -> i64:
        ...

    def __truediv__(self, other: SupportsInt) -> i64:
        ...

    def __neg__(self) -> i64:
        ...

    def __abs__(self) -> i64:
        ...

    def __invert__(self) -> i64:
        ...

    def __lshift__(self, other: SupportsInt) -> i64:
        ...

    def __rshift__(self, other: SupportsInt) -> i64:
        ...

    def __and__(self, other: SupportsInt) -> i64:
        ...

    def __xor__(self, other: SupportsInt) -> i64:
        ...

    def __or__(self, other: SupportsInt) -> i64:
        ...


class f32:

    def __init__(self, value: SupportsFloat) -> None:
        ...

    def __int__(self) -> int:
        ...

    def __float__(self) -> float:
        ...

    def __bool__(self) -> bool:
        ...

    def __lt__(self, other: object) -> bool:
        ...

    def __le__(self, other: object) -> bool:
        ...

    def __eq__(self, other: object) -> bool:
        ...

    def __ne__(self, other: object) -> bool:
        ...

    def __gt__(self, other: object) -> bool:
        ...

    def __ge__(self, other: object) -> bool:
        ...

    def __hash__(self) -> int:
        ...

    def __add__(self, other: SupportsFloat) -> f32:
        ...

    def __sub__(self, other: SupportsFloat) -> f32:
        ...

    def __mul__(self, other: SupportsFloat) -> f32:
        ...

    def __mod__(self, other: SupportsFloat) -> f32:
        ...

    def __floordiv__(self, other: SupportsFloat) -> f32:
        ...

    def __truediv__(self, other: SupportsFloat) -> f32:
        ...

    def __neg__(self) -> f32:
        ...

    def __abs__(self) -> f32:
        ...

    def __trunc__(self) -> f32:
        ...

    def __floor__(self) -> f32:
        ...

    def __ceil__(self) -> f32:
        ...

    def __round__(self, places: int | None = None) -> f32:
        ...


class f64:

    def __init__(self, value: SupportsFloat) -> None:
        ...

    def __int__(self) -> int:
        ...

    def __float__(self) -> float:
        ...

    def __bool__(self) -> bool:
        ...

    def __lt__(self, other: object) -> bool:
        ...

    def __le__(self, other: object) -> bool:
        ...

    def __eq__(self, other: object) -> bool:
        ...

    def __ne__(self, other: object) -> bool:
        ...

    def __gt__(self, other: object) -> bool:
        ...

    def __ge__(self, other: object) -> bool:
        ...

    def __hash__(self) -> int:
        ...

    def __add__(self, other: SupportsFloat) -> f64:
        ...

    def __sub__(self, other: SupportsFloat) -> f64:
        ...

    def __mul__(self, other: SupportsFloat) -> f64:
        ...

    def __mod__(self, other: SupportsFloat) -> f64:
        ...

    def __floordiv__(self, other: SupportsFloat) -> f64:
        ...

    def __truediv__(self, other: SupportsFloat) -> f64:
        ...

    def __neg__(self) -> f64:
        ...

    def __abs__(self) -> f64:
        ...

    def __trunc__(self) -> f64:
        ...

    def __floor__(self) -> f64:
        ...

    def __ceil__(self) -> f64:
        ...

    def __round__(self, places: int | None = None) -> f64:
        ...


def isnan(value: SupportsFloat) -> bool:  # Not "technically" the same.
    ...


def unpack_u8(data: bytes) -> u8:
    ...


def pack_u8(value: u8) -> bytes:
    ...


def unpack_u16(data: bytes) -> u16:
    ...


def pack_u16(value: u16) -> bytes:
    ...


def unpack_u32(data: bytes) -> u32:
    ...


def pack_u32(value: u32) -> bytes:
    ...


def unpack_u64(data: bytes) -> u64:
    ...


def pack_u64(value: u64) -> bytes:
    ...


def unpack_i8(data: bytes) -> i8:
    ...


def pack_i8(value: i8) -> bytes:
    ...


def unpack_i16(data: bytes) -> i16:
    ...


def pack_i16(value: i16) -> bytes:
    ...


def unpack_i32(data: bytes) -> i32:
    ...


def pack_i32(value: i32) -> bytes:
    ...


def unpack_i64(data: bytes) -> i64:
    ...


def pack_i64(value: i64) -> bytes:
    ...


def unpack_f32(data: bytes) -> f32:
    ...


def pack_f32(value: f32) -> bytes:
    ...


def unpack_f64(data: bytes) -> f64:
    ...


def pack_f64(value: f64) -> bytes:
    ...
